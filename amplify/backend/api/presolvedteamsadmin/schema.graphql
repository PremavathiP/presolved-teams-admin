# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type clientSignup
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "id"
        operations: [read]
        identityClaim: "custom:tenantId"
      }
      {
        allow: groups
        groups: ["p3fAdmin"]
        operations: [read, create, update, delete]
      }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  name: String!
  email: String!
  phone: String!
  company: String!
  address: String!
  city: String!
  state: String!
  zip: String!
  country: String!
}

type clientUsers
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "tenantId"
        operations: [read, create, update, delete]
        identityClaim: "custom:tenantId"
      }
      {
        allow: groups
        groups: ["tenantAdmin"]
        operations: [read, create, update, delete]
      }
      { allow: groups, groups: ["tenantUser"], operations: [read] }
      {
        allow: groups
        groups: ["p3fAdmin"]
        operations: [read, create, update, delete]
      }
      { allow: public, operations: [create, read] }
    ]
  ) {
  id: ID!
  tenantId: String!
  name: String!
  email: String!
  role: String!
  status: Int!
}

type clientIntergrations
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "tenantId"
        operations: [read, create, update, delete]
        identityClaim: "custom:tenantId"
      }
      {
        allow: groups
        groups: ["tenantAdmin"]
        operations: [read, create, update, delete]
      }
      {
        allow: groups
        groups: ["p3fAdmin"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  tenantId: String!
  mstenantId: String!
  loginMS: Int!
  consentMS: Int!
  attributes: AWSJSON!
}

type clientUserWhitelisting
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "tenantId"
        operations: [read, create, update, delete]
        identityClaim: "custom:tenantId"
      }
      {
        allow: groups
        groups: ["tenantAdmin"]
        operations: [read, create, update, delete]
      }
      {
        allow: groups
        groups: ["p3fAdmin"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  tenantId: String!
  displayName: String!
  businessPhones: AWSJSON!
  givenName: String!
  jobTitle: String!
  mail: String!
  mobilePhone: String!
  officeLocation: String!
  preferredLanguage: String!
  surname: String!
  userPrincipalName: String!
  uid: String!
}

type ClientCallLogs
  @model  
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "tenantId"
        operations: [read]
        identityClaim: "custom:tenantId"
      }
      { allow: groups, groups: ["tenantAdmin"], operations: [read] }
      {
        allow: groups
        groups: ["p3fAdmin"]
        operations: [read, create, update, delete]
      }
      { allow: public, operations: [create, read] }
    ]
  ) {
  tenantId: ID! @index(name: "byTenantId")
  callRecordId: ID! @primaryKey  
  callType: String!  
  callStartTime: AWSDateTime!
  callEndTime: AWSDateTime!
  callDuration: Int!
  charge: Float!
  callerNumber: String!
  calleeNumber: String!
}

type PresolvedAudit
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "tenantId"
        operations: [read, create]
        identityClaim: "custom:tenantId"
      }
      { allow: groups, groups: ["tenantAdmin"], operations: [read, create] }
      { allow: groups, groups: ["p3fAdmin"], operations: [read, create] }
    ]
  ) {
  id: ID!
  tenantId: String!
  resource: String!
  action: String!
  byUser: String!
  byDateTime: AWSDateTime!
  changesMade: AWSJSON
}
